volumes:
  n8n_storage:
  postgres_storage:
  redis_storage:

networks:
  N8N-LAN:

x-n8n: &service-n8n
  image: n8nio/n8n:1.109.2
  networks: ['N8N-LAN']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
  # Redis settings for use as memory in flows
    - REDIS_HOST=redis
    - REDIS_PORT=6379
  env_file:
    - path: .env
      required: true

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ['N8N-LAN']
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - ./n8n/demo-data:/demo-data
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: redis
    networks: ['N8N-LAN']
    restart: unless-stopped
    ports:
      - 6379:6379
    volumes:
      - redis_storage:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5

  waha:
    image: devlikeapro/waha:latest-2025.9.2
    container_name: waha
    networks: ['N8N-LAN']
    restart: unless-stopped
    ports:
      - "3000:3000"   # API HTTP
      - "3001:3001"   # Painel Web (opcional)
    environment:
      - WAHA_LICENSE=free              # ou sua licença se tiver
      - WAHA_PORT=3000
      - WAHA_UI_PORT=3001
      - TZ=America/Sao_Paulo
      - WAHA_LOG_LEVEL=debug
      - WAHA_PERSISTENCE=local
      - WHATSAPP_API_KEY=half2500
      - WHATSAPP_DEFAULT_ENGINE=whatsapp-web
    volumes:
      - ./waha_data:/app/data   # mantém sessões e QR Codes